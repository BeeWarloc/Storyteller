<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\code\storyteller\src\Storyteller.Testing\bin\Debug\Storyteller.Testing.dll" total="683" errors="0" failures="0" not-run="2" inconclusive="0" ignored="2" skipped="0" invalid="0" date="2015-01-09" time="17:10:03">
  <environment nunit-version="2.5.10.11092" clr-version="2.0.50727.5477" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\code\storyteller" machine-name="SLV-JEREMILL01" user="jeremill" user-domain="EXTENDHEALTH" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\code\storyteller\src\Storyteller.Testing\bin\Debug\Storyteller.Testing.dll" executed="True" result="Success" success="True" time="29.437" asserts="0">
    <results>
      <test-suite type="Namespace" name="StoryTeller" executed="True" result="Success" success="True" time="29.312" asserts="0">
        <results>
          <test-suite type="Namespace" name="Testing" executed="True" result="Success" success="True" time="29.312" asserts="0">
            <results>
              <test-suite type="Namespace" name="Bugs" executed="True" result="Success" success="True" time="0.296" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="MethodFactDoesNotUpdateTheCounts" executed="True" result="Success" success="True" time="0.296" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Bugs.MethodFactDoesNotUpdateTheCounts.a_method_that_returns_a_false_boolean_is_a_fact_and_should_be_incrementing_wrongs" executed="True" result="Success" success="True" time="0.265" asserts="1" />
                      <test-case name="StoryTeller.Testing.Bugs.MethodFactDoesNotUpdateTheCounts.a_method_that_returns_a_true_boolean_is_a_fact_and_should_be_incrementing_rights" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CommentTester" executed="True" result="Success" success="True" time="0.187" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.CommentTester.accept_visitor" executed="True" result="Success" success="True" time="0.187" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DisplayParserTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.DisplayParserTester.all_cells_are_in_the_middle" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="StoryTeller.Testing.DisplayParserTester.parse_a_simple_example" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="StoryTeller.Testing.DisplayParserTester.parse_a_simple_example_that_puts_a_cell_at_the_very_beginning" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Domain" executed="True" result="Success" success="True" time="0.328" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="StepLeafTester" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.add_step" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.clear_attribute" executed="True" result="Success" success="True" time="0.031" asserts="7" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.clone_last_node_does_nothing_and_returns_false_if_no_other_steps_exist" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.clone_last_node_if_a_node_exists" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.get_all_unique_attributes" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_down_1" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_down_when_already_last" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_to_bottom" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_to_bottom_when_already_last" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_to_top" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_to_top_when_the_step_is_already_first" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_up_1" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.move_up_when_the_step_is_already_first" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Domain.StepLeafTester.set_step_value_should_set_a_value_on_all_steps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SuiteNavigatorTester" executed="True" result="Success" success="True" time="0.078" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.SuiteNavigatorTester.visit_with_a_suite_filter" executed="True" result="Success" success="True" time="0.047" asserts="23" />
                      <test-case name="StoryTeller.Testing.Domain.SuiteNavigatorTester.visit_with_a_test_filter" executed="True" result="Success" success="True" time="0.016" asserts="23" />
                      <test-case name="StoryTeller.Testing.Domain.SuiteNavigatorTester.visit_with_no_filters" executed="True" result="Success" success="True" time="0.016" asserts="23" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TagsTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.TagsTest.Should_match_tags_with_multiple_tags_match_test" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TagsTest.Should_match_test_with_matching_tags" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TagsTest.Should_match_test_with_multiple_tags" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TagsTest.Should_not_match_test_when_using_tags_that_are_not_used" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TagsTest.Verify_Adding_a_tag" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestFilterTester" executed="True" result="Success" success="True" time="0.078" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.by_default_the_lifecycle_is_any" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.by_default_the_status_is_all" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.do_not_show_empty_suites_when_a_result_status_is_selected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.do_not_show_empty_suites_when_lifecyle_is_set" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.do_not_show_empty_suites_when_tags_are_applied" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.look_for_failed_regression_tests" executed="True" result="Success" success="True" time="0.016" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.look_for_successful_acceptance_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.only_look_for_acceptance_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.only_look_for_failed_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.only_look_for_regression_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.only_look_for_successful_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.only_look_for_unknown_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.show_empty_suites_when_any_lifecycle_and_status_is_all" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.the_filter_should_match_all_tests_when_no_tags_are_applied" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.the_filter_should_match_no_tests_when_using_tags_that_are_not_used" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.the_filter_should_match_tests_with_matching_tags" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.the_filter_should_match_tests_with_multiple_tags" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Domain.TestFilterTester.the_initial_filter_should_match_all_tests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestProgressionTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.TestProgressionTester.can_find_the_path_of_a_part" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                      <test-case name="StoryTeller.Testing.Domain.TestProgressionTester.find_index_of" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Domain.TestProgressionTester.returns_the_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TPathTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.TPathTester.an_empty_string_path_is_the_hierarchy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TPathTester.append" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TPathTester.get_containing_folder" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Domain.TPathTester.locator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.TPathTester.push" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_a_status_after_starting_the_second_or_later_step" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_after_starting_the_second_or_later_step.should_have_the_text_of_the_last_step_running" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_after_starting_the_second_or_later_step.the_progress_count_is_one" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_after_starting_the_second_or_later_step.the_total_count_should_be_the_total_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_a_status_for_the_first_section" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_for_the_first_section.has_the_test_path" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_for_the_first_section.should_have_the_text_of_the_section_running" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_for_the_first_section.the_progress_count_is_just_zero_cause_nothing_has_been_completed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_a_status_for_the_first_section.the_total_count_should_be_the_total_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_the_second_completed_step" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_second_completed_step.should_have_the_text_of_the_last_step_running" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_second_completed_step.the_progress_count_is_two_now" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_the_status_after_incrementing_a_part" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_status_after_incrementing_a_part.has_the_test_path" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_status_after_incrementing_a_part.should_have_the_text_of_the_last_step_running" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_status_after_incrementing_a_part.the_progress_count_is_one" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_building_the_status_after_incrementing_a_part.the_total_count_should_be_the_total_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_finding_all_the_tokens_from_a_test_with_sections" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Domain.when_finding_all_the_tokens_from_a_test_with_sections.read_a_part_that_is_only_nested_one_deep" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_finding_all_the_tokens_from_a_test_with_sections.read_a_section" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Domain.when_finding_all_the_tokens_from_a_test_with_sections.the_initial_status_should_be_the_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DSL" executed="True" result="Success" success="True" time="0.125" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ObjectConstructionExpressionTester" executed="True" result="Success" success="True" time="0.094" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_all_the_primitive_properties" executed="True" result="Success" success="True" time="0.031" asserts="8" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_all_the_primitive_properties_with_extension_method" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_properties_one_at_a_time" executed="True" result="Success" success="True" time="0.047" asserts="3" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_properties_one_at_a_time_with_extension_methods" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_properties_with_a_filter" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectConstructionExpressionTester.specify_properties_with_a_filter_and_the_extension_method" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ObjectVerificationExpressionTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.DSL.ObjectVerificationExpressionTester.check_a_single_property_successfully" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectVerificationExpressionTester.check_a_single_property_that_does_not_match" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectVerificationExpressionTester.check_all_simple_properties_successfully" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.DSL.ObjectVerificationExpressionTester.check_all_simple_properties_with_three_mismatches" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="set_up_fixture_grammar_to_find_and_verify_an_object" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Engine" executed="True" result="Success" success="True" time="5.258" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ActionGrammarTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ActionGrammarTester.builds_sentence" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ActionGrammarTester.execute_picks_up_the_correct_cell" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ActionGrammarTester.GetCells" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssemblyResultTester" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.does_match_on_fixture_class_with_the_default_ctor" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.found_fixture_types" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.ignores_fixture_types_that_do_not_have_a_public_ctor" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.ignores_types_that_are_open_generics" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.should_be_able_to_find_the_system" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.AssemblyResultTester.should_have_scanned_just_fine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="before_and_after_tester_for_table" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.before_and_after_tester_for_table.all_the_steps_should_be_called" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                      <test-case name="StoryTeller.Testing.Engine.before_and_after_tester_for_table.should_have_called_the_after_action_after_all_the_steps" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.before_and_after_tester_for_table.should_have_called_the_before_the_steps" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CellTester" executed="True" result="Success" success="True" time="0.172" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.CellTester.a_cell_with_a_default_value_will_use_that_for_the_sample_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.a_cell_without_a_default_value_will_use_astericks_for_the_sample_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.boolean_result_cell_expected_value_is_read_from_the_step_if_the_value_is_specified" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.boolean_result_cell_expected_value_is_true_if_no_value_is_specified" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.can_read_the_header_attribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.can_serialize" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.can_serialize_selection_values" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.create_by_parameter" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.create_by_parameter_with_a_default_value" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.get_display_returns_MISSING_if_the_value_does_not_exist" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.get_display_returns_the_toString_of_the_value_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.get_display_with_a_default_value_and_no_step_value_should_use_the_default_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.has_default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.on_creation_the_heading_is_the_same_as_the_key" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.override_cell_header" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_argument_with_a_format_exception" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_expected_value_from_step_for_a_boolean_result_cell" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_expected_value_from_step_that_is_boolean_missing_and_input_should_still_log_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_in_DateTime" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_non_null_data_in_for_a_nullable_type" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.read_null_in_from_a_nullable_type_with_NULL" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.record_actual_calls_mark_missing_value_when_the_expected_value_is_missing" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.record_actual_stores_the_data" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.record_actual_when_the_data_is_right" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.record_actual_when_the_data_is_wrong" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.set_argument_if_argument_is_itestcontext_just_uses_the_itestcontext" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.set_argument_if_the_argument_is_not_simple_pulls_that_argument_from_testcontext" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.to_example_as_a_non_simple_type_copies_the_header_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.to_example_as_a_non_simple_type_returns_a_new_cell_of_type_string" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.to_example_as_a_simple_type_returns_self" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.to_example_as_a_timestamp_returns_self" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.use_the_default_value_if_the_main_value_is_missing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.use_the_default_value_if_the_main_value_is_missing_and_the_cell_is_numeric" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.verify_the_actual_when_the_expected_is_a_null_negative_case" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CellTester.verify_the_actual_when_the_expected_is_a_null_positive_case" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CheckGrammarTester" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.CheckGrammarTester.happy_path_execute_with_matching_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CheckGrammarTester.sad_path_with_exception" executed="True" result="Success" success="True" time="0.047" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.CheckGrammarTester.sad_path_with_incorrect_data" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.CheckGrammarTester.sad_path_with_syntax_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigureObjectGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ConfigureObjectGrammarTester.simple_valid_case_of_configure_object_working" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ConfigureObjectGrammarTester.simple_valid_case_should_not_increment_any_of_the_counts" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ConfigureObjectGrammarTester.using_a_default_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CountsTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.add_two_counts" executed="True" result="Success" success="True" time="0.016" asserts="8" />
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.counts_are_all_zero_on_construction" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.increment_rights" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.increment_wrongs" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.is_success" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Engine.CountsTester.reset_clears_all_counts_to_zero" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CreateObjectGrammarTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.CreateObjectGrammarTester.happy_path_creates_the_object_and_puts_it_on_the_TestContext" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.CreateObjectGrammarTester.happy_path_does_not_increment_the_counts" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.CreateObjectGrammarTester.uses_the_default_value_when_the_step_value_is_undefined" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CurriedLineGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.CurriedLineGrammarTester.passes_the_template_to_the_sentence" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Engine.CurriedLineGrammarTester.should_have_cells_for_an_optional_cell_in_the_inner_that_is_part_of_the_template_in_the_curried_grammar" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Engine.CurriedLineGrammarTester.should_have_cells_for_everything_that_is_not_optional_in_the_inner_grammar_and_there_is_no_default" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.CurriedLineGrammarTester.should_have_cells_for_everything_that_is_not_optional_in_the_inner_grammar_and_there_is_no_default_2" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Engine.CurriedLineGrammarTester.should_have_cells_for_everything_that_is_not_optional_in_the_inner_grammar_and_there_is_no_default_3" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DecoratedLineGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.DecoratedLineGrammarTester.executing_the_grammar_runs_the_before_then_the_inner_grammar_then_the_after" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.DecoratedLineGrammarTester.the_template_should_contain_the_prefix_and_suffix_and_the_inner_template" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="default_values" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.default_values.the_default_style_should_be_embed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DoGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.DoGrammarTester.calls_the_action_upon_execute" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.DoGrammarTester.creates_a_dogrammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmbeddedSectionGrammarTester" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.create_an_embeddedSection_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.execute_runs_the_before_step" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.execute_runs_the_child_steps_within_the_fixture" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.execute_when_the_fixture_setup_fails_should_log_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.execute_when_the_fixture_teardown_fails_should_log_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.should_copy_the_style_from_the_grammar" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.the_child_step_name_is_the_fixture_alias" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionGrammarTester.the_label_is_the_fixture_alias_by_default" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmbeddedSectionsTester" executed="True" result="Success" success="True" time="0.406" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.EmbeddedSectionsTester.run_test" executed="True" result="Success" success="True" time="0.406" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EquivalenceCheckerTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.EquivalenceCheckerTester.arrays_are_checked_independently_of_order" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.EquivalenceCheckerTester.check_a_string" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.EquivalenceCheckerTester.expected_is_null" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.EquivalenceCheckerTester.use_equatable_if_possible" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FactGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.FactGrammarTester.run_when_the_fact_is_false" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.FactGrammarTester.run_when_the_fact_is_true" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.FactGrammarTester.run_with_a_test_context_func" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureGraphTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.FixtureGraphTester.build_by_assembly" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.FixtureGraphTester.build_for_app_domain" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.FixtureGraphTester.throws_exception_for_non_existent_fixture" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.FixtureTester.add_a_named_grammar" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.FixtureTester.adding_a_composite_grammar_programmatically" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.FixtureTester.has_the_TODO_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FrameTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.FrameTester.collapse_is_idempotent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.FrameTester.collapse_with_a_hierarchy" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.FrameTester.collapse_with_a_single_child_brings_in_the_exception_text_and_removes_the_child" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.FrameTester.collapse_with_no_child_does_nothing_and_does_not_blow_up" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GrammarBuilderTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.build_a_grammar_for_a_bool_method" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.build_a_grammar_for_a_method_that_returns_a_grammar" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.build_a_grammar_for_a_method_that_returns_a_primitive" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.build_a_grammar_for_a_void_method" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.get_the_name_using_convention_if_the_alias_as_attribute_does_not_exist" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.get_the_name_using_the_alias_attribute_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.has_the_aliased_method" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.has_the_correct_number_of_grammars" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.GrammarBuilderTester.has_the_method_built_grammar" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Importing" executed="True" result="Success" success="True" time="1.311" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GrammarImportTester" executed="True" result="Success" success="True" time="1.295" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Importing.GrammarImportTester.create_a_curried_grammar_import" executed="True" result="Success" success="True" time="1.279" asserts="5" />
                          <test-case name="StoryTeller.Testing.Engine.Importing.GrammarImportTester.do_a_straight_import_if_there_is_no_currying" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ImportGrammarIntegrationTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Importing.ImportGrammarIntegrationTester.run_a_curried_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Importing.ImportGrammarIntegrationTester.run_a_simple_imported_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Importing.ImportGrammarIntegrationTester.the_imported_grammar_is_able_to_access_test_context_and_retrieve_methods" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Library_building_in_FixtureGraph_Tester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.Library_building_in_FixtureGraph_Tester.read_a_fixture_failure" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.Library_building_in_FixtureGraph_Tester.read_a_fixture_will_record_the_Title_of_the_fixture_if_it_is_explicitly_set" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.Library_building_in_FixtureGraph_Tester.read_a_fixture_will_use_the_fixture_name_for_the_title_if_the_fixture_title_is_empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.Library_building_in_FixtureGraph_Tester.read_a_fixture_with_grammar_errors" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Reflection" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MethodExtensionsTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.argument_cells_are_not_a_result" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_template_for_a_method_that_returns_a_value_and_an_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_template_for_a_method_with_a_return_value_and_no_attribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_template_for_a_method_with_a_return_value_and_no_attribute_for_the_format_but_an_attribute_for_the_return_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_template_for_the_method_if_attribute_is_found" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_template_for_the_method_if_no_attribute_is_found" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_the_argument_cells_for_a_method" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_the_argument_cells_for_a_method_that_has_a_non_primitive" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_the_return_cell_with_a_return_alias" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_the_return_cell_without_a_return_alias" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.get_the_return_value_name" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="StoryTeller.Testing.Engine.Reflection.MethodExtensionsTester.the_return_cell_is_a_result_cell" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionActionTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.creates_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.execute_the_void_action_and_missing_an_argument" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.execute_the_void_action_that_would_catch_an_exception" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.execute_the_void_action_with_a_parse_error" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.execute_the_void_action_with_all_the_arguments" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.executing_with_an_exception_in_the_target_method_increments_the_exception_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.get_template_for_the_method_if_attribute_is_found" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionActionTester.get_template_for_the_method_if_no_attribute_is_found" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionAssertionTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ReflectionAssertionTester.cannot_make_an_assertion_out_of_a_method_that_does_not_return_bool" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionAssertionTester.execute_successfully" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionAssertionTester.execute_with_exception" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionAssertionTester.execute_with_false" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionAssertionTester.get_the_cells" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionValueCheckTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ReflectionValueCheckTester.create_a_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionValueCheckTester.execute_the_method_with_a_step_and_store_the_actual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionValueCheckTester.make_the_last_parameter_the_output_cell_if_not_aliased" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionValueCheckTester.marks_the_testdata_with_right_if_the_actual_matches_the_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ReflectionValueCheckTester.marks_the_testdata_with_wrong_if_the_actual_is_wrong" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SectionTester" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.accept_visitor_calls_into_steps_as_well" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.accept_visitor_calls_the_right_method" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.add_comment" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.GetName_is_the_Label_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.GetName_uses_the_fixture_name_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.GetName_uses_the_name_property_from_the_fixture_object" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.section_starts_the_new_fixture" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.SectionTester.section_starts_the_new_fixture_on_execute_by_key" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SelectionListTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SelectionListTester.read_explicit_selection_values_on_return_value" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionListTester.read_on_sentence_by_explicit_list" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionListTester.read_on_sentence_by_key" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionListTester.read_on_table" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionListTester.read_values_on_return_value_by_key" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SelectionValueAttributeTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SelectionValueAttributeTester.set_the_list_value_when_the_attribute_has_an_enum_type" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionValueAttributeTester.set_the_list_value_when_the_attribute_has_the_values_set_explicitly" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Engine.SelectionValueAttributeTester.set_the_list_value_when_the_attribute_only_has_the_key_value" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ServiceActionGrammarTester" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.create_a_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.execute_picks_up_the_correct_cell" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.GetCells" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.run_from_fixture_expression_with_an_input" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.run_from_fixture_expression_with_an_input_that_uses_the_test_context" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.run_from_fixture_expression_with_an_input_that_uses_the_test_context_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.run_from_the_fixture_expression_with_no_inputs" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceActionGrammarTester.use_default_values" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ServiceAssertionGrammarTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.ServiceAssertionGrammarTester.create_a_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceAssertionGrammarTester.execute_records_the_actual" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.ServiceAssertionGrammarTester.GetCells" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SetPropertyGrammarTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SetPropertyGrammarTester.create_a_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.SetPropertyGrammarTester.sets_a_numeric_property_happy_path" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SetPropertyGrammarTester.sets_a_numeric_property_happy_path_with_a_default_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SetPropertyGrammarTester.sets_a_simple_property_happy_path" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SetPropertyGrammarTester.try_to_set_property_when_the_current_object_is_missing" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Sets" executed="True" result="Success" success="True" time="0.250" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="can_compare_nulls_and_blanks" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.can_compare_nulls_and_blanks.should_have_succeeded" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.can_compare_nulls_and_blanks.the_results_should_completely_match" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DataColumnMatchTester" executed="True" result="Success" success="True" time="0.078" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataColumnMatchTester.get_cell" executed="True" result="Success" success="True" time="0.047" asserts="4" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataColumnMatchTester.read_step_successfully_if_it_exists_and_is_formatted_correctly" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataColumnMatchTester.read_the_actual_values" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DataRowSetTesting" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataRowSetTesting.run_a_test_with_a_fixture_defined_with_a_grammar_that_does_not_have_before_steps_that_does_not_match" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataRowSetTesting.run_a_test_with_a_fixture_defined_with_a_grammar_that_does_not_have_before_steps_that_does_not_match_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataRowSetTesting.run_a_test_with_a_fixture_defined_with_a_grammar_that_has_before_steps" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.DataRowSetTesting.run_a_test_with_a_fixture_defined_with_a_grammar_that_has_before_steps_that_does_not_match" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ObjectComparerTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.ObjectComparerTester.get_cells_has_a_cell_for_each_property" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyMatchTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.PropertyMatchTester.builds_the_correct_cell" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.PropertyMatchTester.read_correctly_formatted_step_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.PropertyMatchTester.read_incorrectly_formatted_step_value_increments_syntax_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.PropertyMatchTester.reads_actual_off_the_target_object" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetRowTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.matches_is_false_for_two_properties" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.matches_is_false_when_a_property_is_missing_in_the_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.matches_is_false_when_the_matcher_has_overriden_the_comparison_mechanism" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.matches_is_true_when_the_matcher_has_overriden_comparison_mechanism" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.matches_is_true_with_two_properties" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetRowTester.never_matches_if_there_are_missing_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetVerificationTesting" executed="True" result="Success" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_completely_matching_test_1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_completely_matching_test_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_matching_test_with_more_duplicate_rows_than_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_matching_test_with_other_rows_as_well" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_matching_test_with_rows_that_have_same_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_test_with_a_fixture_defined_with_a_grammar_that_has_before_steps" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_test_with_all_matches_but_in_wrong_order" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_test_with_matches_and_missing_and_extras" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_test_with_one_extra_row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.run_a_test_with_one_missing_expected_row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.SetVerificationTesting.when_writing_the_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StringComparerTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.get_cells_gets_one_cell_with_string_and_step_name_looking_for_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.returns_itself_as_the_only_property" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.run_integrated_fail_with_extra_data" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.run_integrated_fail_with_missing_data" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.run_integrated_success" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.when_creating_the_actual_row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.StringComparerTester.when_creating_the_expected_row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="when_doing_set_verification_with_missing_rows" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_doing_set_verification_with_missing_rows.should_be_in_the_order_of_the_expected_set" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_doing_set_verification_with_missing_rows.should_have_rows_for_all_the_expected_rows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_doing_set_verification_with_missing_rows.the_missing_rows_should_be_tagged_as_missing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="when_matching_exactly" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_matching_exactly.each_row_in_the_result_should_be_a_match" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_matching_exactly.the_count_should_be_exactly_the_same_number_as_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_matching_exactly.the_order_of_the_rows_should_be_that_as_the_expected_rows" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="when_the_contents_match_but_out_of_order" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_contents_match_but_out_of_order.each_row_in_the_result_should_be_a_match" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_contents_match_but_out_of_order.the_count_should_be_exactly_the_same_number_as_expected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_contents_match_but_out_of_order.the_order_of_the_rows_should_be_that_as_the_expected_rows" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="when_the_set_matches_but_the_order_is_wrong" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_set_matches_but_the_order_is_wrong.one_row_for_each_match_and_each_out_of_order_row" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_set_matches_but_the_order_is_wrong.should_appear_in_the_actual_order" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_the_set_matches_but_the_order_is_wrong.the_out_of_order_rows_should_be_marked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="when_verifying_a_set_of_data_and_the_function_blows_up_before_it_can_be_called" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_verifying_a_set_of_data_and_the_function_blows_up_before_it_can_be_called.all_the_rows_are_wrong_because_they_are_missing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_verifying_a_set_of_data_and_the_function_blows_up_before_it_can_be_called.all_the_steps_should_be_missing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_verifying_a_set_of_data_and_the_function_blows_up_before_it_can_be_called.the_counts_should_show_an_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.when_verifying_a_set_of_data_and_the_function_blows_up_before_it_can_be_called.the_exception_should_be_recorded_at_the_step_level" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="with_extra_and_missing_rows" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.with_extra_and_missing_rows.should_be_a_row_for_each_match_missing_and_extra" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.with_extra_and_missing_rows.should_have_one_extra" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="StoryTeller.Testing.Engine.Sets.with_extra_and_missing_rows.should_have_one_missing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="with_extra_rows" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.Engine.Sets.with_extra_rows.extra_rows_should_be_in_the_results" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SimpleGrammarTester.description_does_not_blow_up" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SimpleGrammarTester.executing_should_call_the_inner_grammar_action" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SimpleGrammarTester.the_text_should_be_what_was_supplied_in_the_constructor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleTestRunningTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SimpleTestRunningTester.got_the_counts" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SimpleTestRunningTester.Smoke_test" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SingleLineGrammarTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.SingleLineGrammarTester.creating_a_single_line_grammar_without_a_suitable_method_will_throw_exception" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.SingleLineGrammarTester.execute_before_then_the_inner_grammar_then_the_after" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.SingleLineGrammarTester.gets_the_inner_cells" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StepResultsTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.StepResultsTester.store_and_retrieve_a_result" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableGrammarTester" executed="True" result="Success" success="True" time="0.078" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.TableGrammarTester.create_the_Table" executed="True" result="Success" success="True" time="0.062" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.TableGrammarTester.executing_the_table_grammar_will_execute_the_inner_grammar_for_each_child_row" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableGrammarTestRunningTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.TableGrammarTestRunningTester.run_the_test_and_get_the_counts" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TableGrammarTestRunningTester.run_the_test_and_get_the_counts_with_the_grammar_expressed_in_dsl" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestContextTester" executed="True" result="Success" success="True" time="0.109" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.call_fixture_setup_when_loading_a_fixture" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.calls_listener_end_section" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.calls_listener_start_section" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.can_retrieve_its_own_execution_context" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.can_retrieve_its_own_test" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.catch_all_exception_on_grammar_adds_exception_count_and_exception_text" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.catch_the_storyteller_exception_on_grammar_adds_exception_count_and_exception_message_only" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.context_should_tell_a_fixture_that_it_is_finished_at_the_end" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.ending_a_section_should_tell_the_previous_fixture_to_finish" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.get_string_for_DbNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.get_string_for_empty_string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.get_string_for_null" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.increment_exceptions" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.increment_rights" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.increment_syntax_errors" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.increment_wrongs" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.load_and_revert_fixtures" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.load_fixture_directly_and_find_object_off_of_it" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.log_exception_from_section_setup" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.retrieving_ITestContext_always_returns_itself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.revert_fixture_should_throw_an_exception_if_log_action_is_null" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.reverting_a_fixture_with_an_exception_in_teardown_increments_exceptions_and_captures_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.run_a_step" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.running_a_step_logs_the_start_and_end_of_the_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.sets_the_context_on_the_fixture_when_loading_a_fixture" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.stop_test_if_the_test_observer_trips_off_the_cannot_continue_condition" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.store_and_retrieve" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.store_and_retrieve_backs_up_by_the_system" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.TestContextTester.throw_argument_not_null_exception_when_the_log_action_is_null" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestRunnerTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.TestRunnerTester.run_a_test_when_setup_blows_up_do_not_rethrow_exception_and_log_the_exception_to_the_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="the_cell_should_be_is_result" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.the_cell_should_be_is_result.is_result_is_true" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeExtensionsTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.TypeExtensionsTester.get_alias_for_a_fixture_class_with_an_attribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.TypeExtensionsTester.get_alias_for_a_fixture_class_with_no_attribute" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_and_executing_a_TableLineGrammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_called_the_after_method_on_the_target_after_setting_values" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_called_the_before_method_on_the_target_before_setting_any_other_values" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_cells_for_the_inputs_and_outputs" executed="True" result="Success" success="True" time="0.000" asserts="13" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_recorded_actual_values_on_the_step" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_recorded_one_right_and_one_wrong" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_have_set_the_setter_values_on_the_target_object" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.when_building_and_executing_a_TableLineGrammar.should_respect_the_default_value" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_checking_a_property_and_the_expected_is_missing" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_and_the_expected_is_missing.exception_text_should_include_a_note_about_age_being_missing" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_and_the_expected_is_missing.should_have_a_syntax_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_and_the_expected_is_missing.the_property_should_be_in_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_checking_a_property_that_throws_an_exception" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_that_throws_an_exception.captures_the_exception_text" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_that_throws_an_exception.counts_should_have_incremented_an_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_property_that_throws_an_exception.the_property_is_in_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_checking_a_single_property_for_a_matching_value" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_a_matching_value.should_record_the_actual_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_a_matching_value.the_property_in_the_step_should_not_be_in_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_a_matching_value.the_rights_should_be_incremented" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_checking_a_single_property_for_an_incorrect_value" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_an_incorrect_value.should_record_the_actual_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_an_incorrect_value.the_property_in_the_step_should_not_be_in_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_checking_a_single_property_for_an_incorrect_value.the_wrongs_should_be_incremented" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_creating_a_grammar_marked_as_a_table_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_creating_a_grammar_marked_as_a_table_grammar.inner_grammar_should_be_created_to_match_the_method" executed="True" result="Success" success="True" time="0.016" asserts="5" />
                      <test-case name="StoryTeller.Testing.Engine.when_creating_a_grammar_marked_as_a_table_grammar.should_be_a_table_grammar" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.when_creating_a_grammar_marked_as_a_table_grammar.should_use_the_label_from_the_attribute" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_creating_a_grammar_marked_as_a_table_grammar.step_name_should_be_Rows_by_default" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_defining_a_curried_grammar_with_the_DSL" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_defining_a_curried_grammar_with_the_DSL.use_a_curried_grammar" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Engine.when_defining_a_curried_grammar_with_the_DSL.use_a_curried_grammar_2" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_executing_the_composite_grammar" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_composite_grammar.calls_a_do_grammar" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_composite_grammar.calls_the_after_method" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_composite_grammar.calls_the_before_method" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_composite_grammar.captures_exception_if_anything_goes_wrong" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_composite_grammar.execute_all_the_grammars" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_executing_the_curried_line_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_curried_line_grammar.curry_a_mandatory_cell_should_use_the_curried_value_in_execution" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_curried_line_grammar.leaving_an_optional_cell_of_the_inner_out_of_the_template_and_do_not_specify_a_default_for_that_optional" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_curried_line_grammar.should_apply_explicit_values_of_the_curried_template_to_optional_cells_of_the_inner_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_curried_line_grammar.should_apply_explicit_values_of_the_curried_template_to_the_inner_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_executing_the_curried_line_grammar.specify_a_default_value_for_an_optional_cell_of_the_inner_that_is_not_part_of_the_template" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_getting_argument_for_a_missing_value" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_getting_argument_for_a_missing_value.should_have_recorded_a_syntax_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_getting_argument_for_a_missing_value.should_have_recorded_exception_text" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_getting_the_cells_for_a_compound_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_getting_the_cells_for_a_compound_grammar.should_read_cells_for_all_child_grammars" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_getting_the_structure_of_a_composite_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_getting_the_structure_of_a_composite_grammar.should_copy_the_description_of_the_child_grammars" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_getting_the_structure_of_a_composite_grammar.should_copy_the_embed_style_from_composite_grammar_to_paragraph" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_getting_the_structure_of_a_composite_grammar.should_transfer_the_grammar_structures_for_each_of_the_child_grammars" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_getting_the_structure_of_a_composite_grammar.should_transfer_the_label" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_fixture_that_has_errors_while_scanning_for_grammars" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_reading_a_fixture_that_has_errors_while_scanning_for_grammars.has_a_grammar_message" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_reading_a_fixture_that_has_errors_while_scanning_for_grammars.has_the_grammar_error_text_from_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_an_argument_successfully_for_an_input_cell" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_reading_an_argument_successfully_for_an_input_cell.argument_should_have_been_parsed_as_an_integer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_reading_an_argument_successfully_for_an_input_cell.cell_automatically_creates_selection_values_for_an_enumeration_type" executed="True" result="Success" success="True" time="0.000" asserts="10" />
                      <test-case name="StoryTeller.Testing.Engine.when_reading_an_argument_successfully_for_an_input_cell.the_counts_should_all_be_zero" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_grammars_from_a_fixture" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_reading_grammars_from_a_fixture.do_not_create_grammar_for_setup" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_reading_grammars_from_a_fixture.do_not_create_grammar_for_teardown" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_reading_grammars_from_a_fixture.should_only_have_the_single_explicitly_defined_Grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_running_a_test_that_times_out" executed="True" result="Success" success="True" time="2.059" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_running_a_test_that_times_out.should_have_the_timeout_message" executed="True" result="Success" success="True" time="1.030" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_running_a_test_that_times_out.should_increment_exceptions" executed="True" result="Success" success="True" time="1.030" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_setting_the_argument_with_a_formatting_problem" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_setting_the_argument_with_a_formatting_problem.should_have_recorded_a_syntax_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_setting_the_argument_with_a_formatting_problem.should_have_recorded_exception_text" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_TestContext_is_building_a_fixture" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_TestContext_is_building_a_fixture.should_store_itself_on_the_fixture_as_the_test_context" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_the_before_action_fails_in_embedded_section_execute" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_the_before_action_fails_in_embedded_section_execute.incremented_the_counts_for_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Engine.when_the_before_action_fails_in_embedded_section_execute.should_have_logged_the_exception" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Engine.when_the_before_action_fails_in_embedded_section_execute.still_runs_the_inner_embed_even_with_the_failure" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_writing_a_checkpropertygrammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Engine.when_writing_a_checkpropertygrammar.create_a_grammar_structure" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Engine.when_writing_a_checkpropertygrammar.create_a_grammar_structure_for_a_nullable_date" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ErrorsTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.ErrorsTester.capture_error_on_the_second_frame" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.capture_error_on_third_frame" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.capture_exception_text" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.capture_exception_with_frame" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.capturing_an_exception_means_that_has_errors_should_be_true" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.clear_will_clear_out_the_frame_errors" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.mark_as_exception" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.mark_as_failure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.marking_a_missing_value_should_set_HasErrors_to_true" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.MarkMissingStep" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.reset_clears_exception" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.reset_clears_exception_text_and_has_errors" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.ErrorsTester.reset_clears_failure_keys" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="EventPublisherTester" executed="True" result="Success" success="True" time="0.234" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.EventPublisherTester.does_not_blow_up_on_null_messages" executed="True" result="Success" success="True" time="0.031" asserts="0" />
                  <test-case name="StoryTeller.Testing.EventPublisherTester.relays_to_the_event_aggregator" executed="True" result="Success" success="True" time="0.203" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Execution" executed="True" result="Success" success="True" time="3.191" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DirectoryRunnerTester" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.DirectoryRunnerTester.load_files_from_directory" executed="True" result="Success" success="True" time="0.062" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureAssembly_construction_from_Project" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.FixtureAssembly_construction_from_Project.can_find_candidate_types" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Execution.FixtureAssembly_construction_from_Project.copies_the_root_and_assembly_names" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectTestRunnerIntegratedTester" executed="True" result="Success" success="True" time="2.832" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.ProjectTestRunnerIntegratedTester.run_a_single_property" executed="True" result="Success" success="True" time="2.816" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_building_the_test_execution_request" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_building_the_test_execution_request.includes_the_test" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Execution.when_building_the_test_execution_request.sets_the_stop_conditions_1" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                      <test-case name="StoryTeller.Testing.Execution.when_building_the_test_execution_request.sets_the_stop_conditions_2" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_running_all_the_tests" executed="True" result="Success" success="True" time="0.140" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_running_all_the_tests.finish_test" executed="True" result="Success" success="True" time="0.109" asserts="0" />
                      <test-case name="StoryTeller.Testing.Execution.when_running_all_the_tests.run_the_tests" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_running_the_test_and_the_domain_has_not_been_started" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_running_the_test_and_the_domain_has_not_been_started.should_execute_the_test_with_the_values_from_the_test_stop_conditions" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="StoryTeller.Testing.Execution.when_running_the_test_and_the_domain_has_not_been_started.should_first_interrogate_the_runner_domain_to_see_if_it_is_running" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="StoryTeller.Testing.Execution.when_running_the_test_and_the_domain_has_not_been_started.should_put_the_test_results_onto_the_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Execution.when_running_the_test_and_the_domain_has_not_been_started.should_then_start_the_test_app_domain" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_the_system_is_not_specified_and_one_is_found" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_the_system_is_not_specified_and_one_is_found.use_the_single_type" executed="True" result="Success" success="True" time="0.047" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_the_system_is_not_specified_and_there_is_only_on_in_the_assembly" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_the_system_is_not_specified_and_there_is_only_on_in_the_assembly.use_the_single_type_from_the_named_assembly" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_the_system_type_is_specified" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_the_system_type_is_specified.fixture_assembly_does_capture_the_root_folder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Execution.when_the_system_type_is_specified.the_system_type_should_be_the_type_specified" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_the_system_type_name_is_null_or_empty_and_there_are_multiple_candidates" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Execution.when_the_system_type_name_is_null_or_empty_and_there_are_multiple_candidates.the_system_should_be_nullo_system" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="HierarchyTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.HierarchyTester.add_test_by_one_deep_path" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.HierarchyTester.add_test_by_path_with_no_slashes" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                  <test-case name="StoryTeller.Testing.HierarchyTester.add_test_by_two_deep_path_twice" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.HierarchyTester.find_all_workspaces_from_a_project" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                  <test-case name="StoryTeller.Testing.HierarchyTester.get_path_is_just_an_empty_string" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.HierarchyTester.verify_child_parent_relationships_smoke_test" executed="True" result="Success" success="True" time="0.016" asserts="44" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Integration" executed="True" result="Success" success="True" time="18.539" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="GrammarIntegrationTests" executed="True" result="Success" success="True" time="9.271" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.boolean_results_in_set_verification" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Cannot_find_fixture" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.cannot_find_grammar" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.check_properties" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Composite_with_errors" executed="True" result="Success" success="True" time="4.045" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Currying" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.data_table_comparison_with_overriden_matcher" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.decision_tables" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.embeds" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Facts" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.importing_and_currying" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Ordered_set" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Ordered_string_set_failure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Ordered_string_set_success" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.sad_path_data_table_comparison" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Sentences" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.service_grammars" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Set_with_Error" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Simple_Composite" executed="True" result="Success" success="True" time="5.071" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.successful_data_table_comparison" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Table_with_Errors" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Tables" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.GrammarIntegrationTests.Unordered_Set" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JSonGrammarIntegrationTests" executed="True" result="Success" success="True" time="9.236" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Cannot_find_fixture" executed="True" result="Success" success="True" time="0.031" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.cannot_find_grammar" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Composite_with_errors" executed="True" result="Success" success="True" time="4.056" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.decision_tables" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.embeds" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Facts" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Ordered_set" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Ordered_string_set_failure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Ordered_string_set_success" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Sentences" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Set_with_Error" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Simple_Composite" executed="True" result="Success" success="True" time="5.071" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Table_with_Errors" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Tables" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.JSonGrammarIntegrationTests.Unordered_Set" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_a_project_loads_a_hierarchy" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.all_the_other_suites_below_workspace_should_just_be_suites" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.child_suite_has_its_child_suites" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.child_suite_has_its_tests" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.loads_the_tests_in_the_root_level" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.the_name_of_the_hierarchy_matches_the_project" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Integration.when_a_project_loads_a_hierarchy.the_tests_at_the_top_level_have_the_parent_set_to_the_hierarchy" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Model" executed="True" result="Success" success="True" time="0.078" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DoGrammarStructureTester" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.DoGrammarStructureTester.write_the_result_with_error_should_write_the_error" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[until 3/20]]></message>
                        </reason>
                      </test-case>
                      <test-case name="StoryTeller.Testing.Model.DoGrammarStructureTester.write_the_result_with_no_error_should_do_nothing" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[until 3/20]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureLibraryFindTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.FixtureLibraryFindTester.find_fixturegraph_by_path" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Model.FixtureLibraryFindTester.find_grammar_by_path" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Model.FixtureLibraryFindTester.find_the_library_with_an_empty_path" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureLibraryTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.FixtureLibraryTester.description" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.FixtureLibraryTester.Title" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureStructure_implementation_of_FixtureNode" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.FixtureStructure_implementation_of_FixtureNode.combines_the_list_of_all_errors" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.FixtureStructure_implementation_of_FixtureNode.Title" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GrammarStructure_FixtureNode_Implementation_tester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.GrammarStructure_FixtureNode_Implementation_tester.get_path_with_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.GrammarStructure_FixtureNode_Implementation_tester.get_path_without_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.GrammarStructure_FixtureNode_Implementation_tester.Label" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="sentence_validating_a_step" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.sentence_validating_a_step.all_attributes_exist_and_no_grammar_errors" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.sentence_validating_a_step.extra_attributes_but_no_missing_or_grammar_errors_is_a_warning" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.sentence_validating_a_step.extra_attributes_plus_one_missing_is_an_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.sentence_validating_a_step.grammar_errors_and_a_missing_input_should_be_an_error" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.sentence_validating_a_step.grammar_errors_but_all_input_should_show_up_as_warning" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_a_sentence_writes_out_an_editor" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_a_sentence_writes_out_an_editor.label_adds_text_for_a_sentence" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_adding_a_grammar_structure_to_a_fixturegraph" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_adding_a_grammar_structure_to_a_fixturegraph.puts_the_graph_into_the_parent_property_of_the_grammar" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.when_adding_a_grammar_structure_to_a_fixturegraph.puts_the_name_of_the_grammar_onto_the_grammar_when_it_is_added_to_the_fixture_graph" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_creating_the_model_for_a_simple_grammar_line" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_simple_grammar_line.should_have_the_correctly_ordered_list_of_sentence_parts_for_the_line_grammar" executed="True" result="Success" success="True" time="0.000" asserts="15" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_creating_the_model_for_a_table_grammar" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_table_grammar.should_have_the_label_from_the_grammar" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_table_grammar.the_table_should_have_the_cells_from_the_parent_grammar" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_table_grammar.the_table_should_have_the_child_step_relationship" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_creating_the_model_for_a_verification_grammar" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_verification_grammar.should_derive_the_cells_from_the_verification_grammar" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_verification_grammar.should_have_the_child_step_name_from_the_grammar" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Model.when_creating_the_model_for_a_verification_grammar.should_have_the_label_from_the_verification_grammar" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_determining_the_inputs_for_display" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_determining_the_inputs_for_display.get_hidden_display_1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.when_determining_the_inputs_for_display.get_hidden_display_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.when_determining_the_inputs_for_display.get_inputs_for_display_when_no_optional_atts_are_used" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.when_determining_the_inputs_for_display.get_inputs_for_display_with_some_of_the_optional_atts_used" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Model.when_determining_the_inputs_for_display.mandatory_cells_should_always_be_shown_even_if_a_value_is_missing_in_step" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_parsing_the_model_for_a_fixture_with_two_line_grammars" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_parsing_the_model_for_a_fixture_with_two_line_grammars.should_create_a_sentence_for_the_go_method" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Model.when_parsing_the_model_for_a_fixture_with_two_line_grammars.should_create_a_sentence_for_the_WhoAmI_method" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Model.when_parsing_the_model_for_a_fixture_with_two_line_grammars.should_find_two_grammars_in_the_fixture" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_setting_the_default_value_for_a_key" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Model.when_setting_the_default_value_for_a_key.the_attribute_for_each_step_in_the_leaf_should_be_the_default_value_of_that_cell" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="perf_testing" executed="True" result="Success" success="True" time="0.312" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.perf_testing.how_bad_is_fixture_creation" executed="True" result="Success" success="True" time="0.296" asserts="0" />
                  <test-case name="StoryTeller.Testing.perf_testing.with_object_converter" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="StoryTeller.Testing.perf_testing.with_raw" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Persistence" executed="True" result="Success" success="True" time="0.031" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JsonNodeTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.for_each_attribute" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.for_each_child" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.get_the_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.is_comment" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.read_and_write_attributes" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.read_and_write_inner_text" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.reading_a_non_existent_attribute_returns_empty_string_to_mimic_XmlNode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.write_a_second_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Persistence.JsonNodeTester.write_a_test" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlTestWriterTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Persistence.XmlTestWriterTester.should_write_out_the_lifecycle" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProjectUtils" executed="True" result="Success" success="True" time="0.094" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Loaders" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProjectDirectoryLoaderTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.ProjectUtils.Loaders.ProjectDirectoryLoaderTester.load_a_project_from_a_project_directory" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectFileLoaderTester" executed="True" result="Success" success="True" time="0.047" asserts="0">
                        <results>
                          <test-case name="StoryTeller.Testing.ProjectUtils.Loaders.ProjectFileLoaderTester.load_a_project_from_the_project_file_if_it_is_found" executed="True" result="Success" success="True" time="0.047" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectLoaderTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.ProjectUtils.ProjectLoaderTester.respects_the_compile_target_flag" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.ProjectUtils.ProjectLoaderTester.respects_the_profile_flag" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Step_Validation_tester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.Step_Validation_tester.all_valid_step" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.Step_Validation_tester.do_not_log_a_missing_attribute_if_the_cell_has_a_default_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.Step_Validation_tester.find_a_missing_and_extra_attribute" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="StoryTeller.Testing.Step_Validation_tester.find_a_missing_attribute" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.Step_Validation_tester.find_an_extra_attribute" executed="True" result="Success" success="True" time="0.016" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StepTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.StepTester.accept_a_visitor" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="StoryTeller.Testing.StepTester.find_step_values" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.StepTester.has_checks_the_cache" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.StepTester.parse_values_works_just_fine_with_blank_or_null_values" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.StepTester.shallow_clone" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="StoryTeller.Testing.StepTester.step_childstepsfor_is_wired_up" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="StoryTeller.Testing.StepTester.step_count_of_a_step_with_child_leaves" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="StoryTeller.Testing.StepTester.step_count_of_a_step_with_child_leaves_and_grand_children" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.StepTester.step_count_of_a_step_with_no_child_leaves" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StoryTellerEnvironmentTester" executed="True" result="Success" success="True" time="0.140" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.StoryTellerEnvironmentTester.gets_the_default_instance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.StoryTellerEnvironmentTester.gets_the_value" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.StoryTellerEnvironmentTester.imports_the_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.StoryTellerEnvironmentTester.serialize_variables_across_AppDomains" executed="True" result="Success" success="True" time="0.125" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SuiteTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.SuiteTester.adding_a_suite_makes_the_parent_to_child_relationship" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.SuiteTester.adding_a_test_to_a_suite_sets_the_suite_as_the_tests_parent" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="StoryTeller.Testing.SuiteTester.contains_works_n_deep" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                  <test-case name="StoryTeller.Testing.SuiteTester.find_test_recursive" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="StoryTeller.Testing.SuiteTester.get_all_tests_n_deep" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.SuiteTester.get_path_if_has_suite_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.SuiteTester.get_path_if_no_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.SuiteTester.get_path_with_hierarchy_at_top" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.SuiteTester.get_project_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestConverterTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.TestConverterTester.apply_changes_integrated_tester" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestConverterTester.apply_json_changes_integrated_tester" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.TestConverterTester.Clone" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.TestTester.absorb_changes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.TestTester.add_comment" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.TestTester.Adding_tags_should_add_to_existing_tags" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="StoryTeller.Testing.TestTester.clone_a_test" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StoryTeller.Testing.TestTester.get_path_under_a_hierarchy" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="StoryTeller.Testing.TestTester.get_path_with_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.get_path_without_a_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.get_status_for_a_successful_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.get_status_on_a_failed_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.get_status_without_a_result" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.is_empty_with_no_sections" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.is_empty_with_some_sections" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.is_in_workspace" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                  <test-case name="StoryTeller.Testing.TestTester.lifecycle_is_acceptance_by_default" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.reset_clears_out_the_last_result" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.reset_sets_the_execution_time_to_zero" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.Retry_count_at_runtime_for_acceptance_tests_is_only_once" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.Retry_count_at_runtime_for_regression_tests_is_unaltered_count" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.toggle_the_lifecycle_from_acceptance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.toggle_the_lifecycle_from_initial_state" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.toggle_the_lifecycle_from_regression" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.use_filename_derived_from_test_name_if_the_filename_is_not_supplied" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.use_filename_derived_from_test_name_if_the_filename_is_not_supplied_and_replaces_spaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.TestTester.use_saved_filename_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_finding_the_first_key" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.when_finding_the_first_key.the_first_key" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_reading_an_invalid_format" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="StoryTeller.Testing.when_reading_an_invalid_format.exception_message_should_specify_missing_and_extra" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.when_reading_an_invalid_format.should_throw_an_exception_with_both_extra_and_missing_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.when_reading_an_invalid_format.should_throw_an_exception_with_extra_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StoryTeller.Testing.when_reading_an_invalid_format.should_throw_an_exception_with_missing_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Workspace" executed="True" result="Success" success="True" time="0.172" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="FileSystemTester" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.FileSystemTester.GetSubfoldersForADirectory" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                      <test-case name="StoryTeller.Testing.Workspace.FileSystemTester.GetSubFoldersShouldNotReturnHiddenDirectoriesEvenIfTheyHaveOtherAttributes" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Workspace.FileSystemTester.save_and_load_an_object_to_xml" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Workspace.FileSystemTester.WriteAndReadText" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.FileSystemTester.WriteToFileSmokeTest" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LazyTestXmlReaderTester" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.LazyTestXmlReaderTester.can_load_the_parts_smoke_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.LazyTestXmlReaderTester.picks_up_the_lifecycle_from_the_xml" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.LazyTestXmlReaderTester.picks_up_the_name_from_the_xml" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectTester" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.create_a_directory" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.default_binary_folder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.default_compile_target" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.default_test_folder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.delete_a_test_file" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.get_test_path" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.get_test_path_when_the_test_overrides_the_file_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.get_the_test_path_of_a_test_at_the_hierarchy_scope" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.GetBaseFolder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.GetBaseFolderReturnsEmptyStringIfNoFileNameIsSet" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.save_and_load_a_test" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.use_the_compile_target_to_determine_the_binary_folder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectTester.use_the_overridden_binary_folder_if_desired" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectValidationTester" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fail_validation_if_the_binary_folder_does_not_exist" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fail_validation_if_the_binary_folder_is_blank" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fail_validation_if_the_test_folder_cannot_be_found" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fail_validation_if_the_test_folder_is_blank" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fixture_assembly_is_not_specified_by_system_is" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.fixture_is_specified_but_not_system_still_valid" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.name_is_missing" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.neither_system_nor_fixture_assembly_are_specified" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Workspace.ProjectValidationTester.successful_validation_case" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_determining_the_config_file_if_none_specified" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.when_determining_the_config_file_if_none_specified.use_app_config_if_it_exists" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_determining_the_config_file_if_none_specified.use_app_config_if_it_exists_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_determining_the_config_file_if_none_specified.use_assembly_name_dll_config_file_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_determining_the_config_file_if_none_specified.use_web_config_if_it_exists" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_determining_the_config_file_if_none_specified.use_web_config_if_it_exists_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_renaming_a_file" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Workspace.when_renaming_a_file.the_new_file_name_should_reflect_the_new_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_renaming_a_file.the_new_test_name_should_be_set" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_renaming_a_file.the_old_file_should_be_deleted" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Workspace.when_renaming_a_file.the_test_should_now_be_saved_at_the_new_file_location" executed="True" result="Success" success="True" time="0.016" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Xml" executed="True" result="Success" success="True" time="0.094" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="reading_the_lifecycle" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.reading_the_lifecycle.lifecycle_is_acceptance_by_default" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.reading_the_lifecycle.read_acceptance_from_node" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.reading_the_lifecycle.read_regression_from_node" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_comment" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_comment.create_a_comment_object_for_a_Comment_node" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_comment.read_a_comment_from_directly_under_the_test_node" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_section" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_section.got_the_correct_grammar_names_of_the_steps" executed="True" result="Success" success="True" time="0.016" asserts="9" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_section.has_a_step_for_each_child_node" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_section.section_name_should_be_the_node_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_step" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_step.should_get_the_grammar_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_step.should_have_children_steps" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_step.should_have_read_all_three_properties" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_step.should_pick_up_attributes_on_a_child_step" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_step.should_pick_up_children_of_child" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_test" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test.should_have_read_the_name_from_the_top_root" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test.should_have_three_parts" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test.should_have_three_sections" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test.the_first_section_has_a_step_with_attributes" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test.the_first_section_should_have_steps" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_reading_a_test_with_an_embedded_table" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_reading_a_test_with_an_embedded_table.should_read_the_children_steps_of_a_step" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_writing_a_test" executed="True" result="Success" success="True" time="0.062" asserts="0">
                    <results>
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_a_node_for_each_section_plus_the_comment_for_the_description_and_a_user_comment" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_a_step_node_for_each_step_in_a_section" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_the_test_name_in_the_top_node" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_written_a_comment_node_at_the_top_of_the_test" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_written_a_comment_within_Address_fixture_section" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_written_an_xml_comment_for_the_address_section" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.should_have_xml_attribute_for_each_step_value" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.tagName_of_a_grammar_element_should_be_the_grammar_key" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StoryTeller.Testing.Xml.when_writing_a_test.the_root_node_should_be_test" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="StoryTellerTestHarness" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
    </results>
  </test-suite>
</test-results>